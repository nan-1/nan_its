<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd         
    http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="dao"></context:component-scan>
	<context:component-scan base-package="shitilei"></context:component-scan>
	<!-- MyBatis数据库连接池 -->
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:spring_config/jd.properties" />
	<!-- 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="10" />
		<property name="minIdle" value="5" />
	</bean>
	<!-- spring和MyBatis完美整合，让spring管理sqlsessionfactory 不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件,加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:spring_config/Mybatis/Mybatis.xml" />
		<!--扫描 XXXmapper.xml映射文件,配置扫描的路径 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	<!-- 获取会话工厂，并注入Mybatis，和dateSource数据库链接 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource"></property> <property name="configLocation" 
		value="classpath:mapper/*.xml"></property> </bean> -->

	<!-- DAO接口所在包名，Spring会自动查找其下的类,自动扫描 将Mapper接口生成代理注入到Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!--配置流程引擎 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 扫描service包下所有使用注解的类型 -->
	<context:component-scan base-package="service"></context:component-scan>
	<!--事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--注入dataSource -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--开启事务注解扫描,配置基于注解的声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>


</beans>